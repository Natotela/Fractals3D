float4 col = 0;
float3 base_pos = pWorldPosition;
float3 normal = 0;

base_pos = (base_pos - pObjectPosition) / pObjectScale * pScale;

int i = 0;

float Xcomponent = dot(base_pos, pRotMatRow1);
float Ycomponent = dot(base_pos, pRotMatRow2);
float Zcomponent = dot(base_pos, pRotMatRow3);
base_pos = float3(Xcomponent, Ycomponent, Zcomponent);

Xcomponent = dot(pCameraVector, pRotMatRow1);
Ycomponent = dot(pCameraVector, pRotMatRow2);
Zcomponent = dot(pCameraVector, pRotMatRow3);
pCameraVector = float3(Xcomponent, Ycomponent, Zcomponent);

float t = pMinDist;

sdfLibrary.initialize(pIterations, pBailout, pPower, 
pFoldScale, 
pCameraVector, pScale, pOrbit.xyz, pOrbitType,
pOrbitOrigin, pFoldAngles, pFoldOffset, pFoldSize, pOffset);

float3 unusedOutputColor = float3(0, 0, 0);

SDF sdf;

for (i = 0; i < pMaxSteps; i++)
{
	float3 pos = base_pos + pCameraVector * t;

	float2 dist = sdf.sdf(pos, OutputColor);

	t += dist.x;

    if (dist.x * pObjectScale < pDisThreshold)
    {
		pos = base_pos + pCameraVector * t;

        col = float4(1, 0, 0, 1);
    	IterationCount = dist.y * pScale;

		if (pUseNormals == 1.0f)
		{
			float3 k = float3(1,-1,0);

			float dx = 0.01; float3 unusedOutputColor = float3(0, 0, 0);

			normal = normalize(k.xyy * sdf.sdf(pos + (k.xyyz*dx).xyz, unusedOutputColor).x +
							 k.yyx * sdf.sdf(pos + (k.yyxz*dx).xyz, unusedOutputColor).x +
							 k.yxy * sdf.sdf(pos + (k.yxyz*dx).xyz, unusedOutputColor).x +
							 k.xxx * sdf.sdf(pos + (k.xxxz*dx).xyz, unusedOutputColor).x);

			float NXcomponent = dot(normal, float3(pRotMatRow1.x , pRotMatRow2.x, pRotMatRow3.x));
			float NYcomponent = dot(normal, float3(pRotMatRow1.y , pRotMatRow2.y, pRotMatRow3.y));
			float NZcomponent = dot(normal, float3(pRotMatRow1.z , pRotMatRow2.z, pRotMatRow3.z));
			normal = float3(NXcomponent, NYcomponent, NZcomponent);
		}
	
        break;
    }

	if (t > pMaxDist)
	{
		break;
	}
}

return float4(normal, col.a);